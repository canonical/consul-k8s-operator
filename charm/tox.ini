# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
skip_missing_interpreters = True
env_list = fmt, lint, static, unit
min_version = 4.0.0

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
lib_path = {tox_root}/lib/charms/consul_k8s
all_path = {[vars]src_path} {[vars]tests_path} {[vars]lib_path}

[testenv]
basepython = python3
set_env =
    PYTHONPATH = {tox_root}/lib:{[vars]src_path}
    PYTHONBREAKPOINT=pdb.set_trace
    PY_COLORS=1
pass_env =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS

[testenv:fmt]
description = Apply coding style standards to code
deps =
    ruff
commands =
    ruff format {[vars]all_path}
    ruff check --fix {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    ruff
    codespell
commands =
    # if this charm owns a lib, uncomment "lib_path" variable
    # and uncomment the following line
    codespell {[vars]lib_path}
    codespell . --skip .git --skip .tox --skip build --skip lib --skip venv --skip .mypy_cache --skip tox.ini
    ruff check {[vars]all_path}
    ruff format --check --diff {[vars]all_path}

[testenv:static-{charm,lib}-py3]
description = Run static type checks
deps =
    pyright
    -r {tox_root}/requirements.txt
    ops
commands =
   charm: pyright {[vars]src_path} {posargs}
   lib: pyright {[vars]lib_path} {posargs}
   lib: /usr/bin/env sh -c 'for m in $(git diff main --name-only {[vars]lib_path}); do if ! git diff main -- ../$m | grep -q "+LIBPATCH\|+LIBAPI"; then echo "You forgot to bump the version on $m!"; exit 1; fi; done'
allowlist_externals = /usr/bin/env

[testenv:static-{charm,lib}]
description = Skipping running static-charm and static-lib, use tox -e static-charm-py3/static-lib-py3 instead

[testenv:unit]
description = Skipping running unit tests, use tox -e unit-tests instead

[testenv:unit-tests]
description = Run unit tests
deps =
    pytest
    coverage[toml]
    -r {tox_root}/requirements.txt
commands =
    coverage run --source={[vars]src_path},{[vars]lib_path} \
                 -m pytest \
                 --tb native \
                 -v \
                 -s \
                 {posargs} \
                 {[vars]tests_path}/unit
    coverage report

[testenv:scenario]
description = Run scenario tests

[testenv:integration]
description = Run integration tests
deps =
    pytest
    juju
    pytest-operator
    -r {tox_root}/requirements.txt
commands =
    pytest -v \
           -s \
           --tb native \
           --log-cli-level=INFO \
           {posargs} \
           {[vars]tests_path}/integration
